syntax = "v1"

info (
	title:   "auth service"
	author:  "akita"
	email:   "1240092443@qq.com"
	version: "1.0.0"
)

// 定义 Token 结构体，用于表示访问令牌
type JWT {
	//    AccessToken  string `json:"access_token"` // 访问令牌
	//    AccessExpire int64  `json:"access_expire"` // 访问令牌过期时间
	//           Token string `json:"token"`
	AccessToken  string `json:"access_token"` // 访问令牌
	RefreshToken string `json:"refresh_token"` // 刷新令牌
}

type LoginRequest {
	Mobile   string `json:"mobile"` // 手机号
	Password string `json:"password"` // 密码
}

type LoginResponse {
	JWT     JWT    `json:"jwt"`
	Message string `json:"message"`
}

// 注册请求结构体
type RegisterRequest {
	Nickname         string `json:"nickname"` // 用户名
	Mobile           string `json:"mobile"` // 手机号
	Password         string `json:"password"` // 密码
	VerificationCode string `json:"verification_code"` // 验证码
}

// 注册响应结构体
type RegisterResponse {
	UserID  int64  `json:"user_id"` // 用户ID
	Message string `json:"message"` // 注册成功响应消息
}

// 验证请求结构体
type VerificationRequest {
	Mobile string `json:"mobile"` // 手机号
}

// 验证响应结构体
type VerificationResponse {
	Message string `json:"message"` // 验证结果
}

//type UserInfoResponse {
// UserID     int64  `json:"user_id"`
// Nickname   string `json:"nickname"`
// Mobile     string `json:"mobile"`
// Avatar     string `json:"avatar"`
// Role       int32  `json:"role"`
// Gender     int    `json:"gender"`
// Addr       string `json:"addr"`
// CreatedAt  string `json:"created_at"`
// UpdatedAt  string `json:"updated_at"`
// DeletedAt  string `json:"deleted_at"`
// Is_Deleted bool   `json:"is_deleted"`
// Message    string `json:"message"`
//}
type LogoutResponse {
	Message string `json:"message"`
}

type AuthenticateRequest {
	Token     string `header:"Token,optional"`
	ValidPath string `header:"ValidPath,optional"`
}

type AuthenticateResponse {
	Message string `json:"message"`
}

type TestResponse {
	StatusCode int32  `json:"status_code"` // 状态码，0-成功，其他值-失败
	StatusMsg  string `json:"status_msg,optional"` // 返回状态描述
	Message    string `json:"message"`
}

type TestRequest {
	Test string `json:"test,optional"`
}

// 定义服务的路由和处理程序
// 公共的handler定义在handler.dart中
@server (
	prefix: /v1/api/auth // 设置路由前缀
)
service auth {
	// // 测试
	// @handler TestHandler
	// post /test (TestRequest) returns (TestResponse)
	// 登陆
	@handler RegisterHandler
	post /register (RegisterRequest) returns (RegisterResponse)

	// 验证请求处理程序
	@handler VerificationHandler
	post /verification (VerificationRequest) returns (VerificationResponse)

	// 登录请求处理程序
	@handler LoginHandler
	post /login (LoginRequest) returns (LoginResponse)
}

@server (
	prefix:     /v1/api/auth // 设置路由前缀
	middleware: JwtAuthMiddleware
	group:      Auth
// jwt:   Auth // 使用 JWT 验证
)
service auth {
	// 登出
	@handler logoutHandler
	post /logout returns (LogoutResponse)

	// 认证接口，支持 GET 和 POST 请求
	@handler authenticateHandlerGet
	get /authenticate returns (AuthenticateResponse)

	@handler authenticateHandlerPost
	post /authenticate returns (AuthenticateResponse)

	@handler TestHandler
	post /test (TestRequest) returns (TestResponse)
// // 用户信息请求处理程序
// @handler UserInfoHandler
// get /info returns (UserInfoResponse)
}

